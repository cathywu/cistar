"""Script containing the base lane area kernel class."""


class KernelLaneAreaDetector(object):
    """Base traffic light kernel.

    This kernel sub-class is used to interact with the simulator with regards
    to all traffic light -dependent components. Specifically, this class
    contains methods for:

    * Information retrieval: This methods contains several methods for acquiring
      information from specific detectors. For example, if you would
      like to get Information about the number of vehicles on the detector in
      the last time step, this can be done by:

        >>> veh_seen = env.k.traffic_light.get_n_veh_seen(node_id)

    All methods in this class are abstract, and must be filled in by the child
    lane area detector kernel of separate simulators.
    """

    def __init__(self, master_kernel):
        """Instantiate the base lane area detector kernel.

        Parameters
        ----------
        master_kernel : flow.core.kernel.Kernel
            the higher level kernel (used to call methods from other
            sub-kernels)
        """
        self.master_kernel = master_kernel
        self.kernel_api = None

    def pass_api(self, kernel_api):
        """Acquire the kernel api that was generated by the simulation kernel.

        Parameters
        ----------
        kernel_api : any
            an API that may be used to interact with the simulator
        """
        self.kernel_api = kernel_api

    def update(self, reset):
        """Get information of subscriptions of the lane area detectors.

        This ensures that the lane area detector information match current traffic data.

        Parameters
        ----------
        reset : bool
            specifies whether the simulator was reset in the last simulation
            step
        """
        raise NotImplementedError

    def get_ids(self):
        """Return the ids of all lane area detectors."""
        raise NotImplementedError
    
    """All following methods are using the API of the lane area detectors from traci:
    https://sumo.dlr.de/docs/TraCI/Lane_Area_Detector_Value_Retrieval.html
    """
    def get_n_veh_seen(self, detector_id):
        """Return number of seen vehicles in the last simulation step"""
        raise NotImplementedError

    def get_m_jam_length(self, detector_id):
        """Return length of jam in meters during the last simulation step"""
        raise NotImplementedError

    def get_v_jam_length(self, detector_id):
        """Return length of jam by number of vehicles during the last simulation 
        step
        """
        raise NotImplementedError

    def get_n_halting(self, detector_id):
        """Return number of vehicles that halted(zero speed) in the last simulation
        step
        """
        raise NotImplementedError

    def get_mean_speed(self, detector_id):
        """Return the mean speed of the vehicles in the last simulation step"""
        raise NotImplementedError

    def get_occupancy(self, detector_id):
        """Return the percentage of space the detector was occupied by vehicles
        in the last simulation step
        """
        raise NotImplementedError

    def get_v_id_list(self, detector_id):
        """Return the ids of all vehicles that were on the detector in the last
        simulation step
        """
        raise NotImplementedError
